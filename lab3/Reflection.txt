1. In your own words, explain the cause of this specific segmentation fault. What value gets corrupted and on which assembly instruction does the segmentation fault occur?  [3 pt]

The return address get corrupted and that causes the Segmentation fault at 0x400b43 <main+219> leaveq. Providing an array size that is larger than the actual size of the array results in insufficient buffer space being dedicated in memory and causes the indexing to continue out of bounds, overwriting the return value. 

2. It turns out that you can figure out when you will get a segfault in part2 just by looking at the assembly code! There are a few instructions that contribute to determining the limit on the second argument to fillArray. Name the 2 most relevant instructions. Give both what the instructions are and their addresses in the form "<function+#>" as you see in GDB. What is the purpose of each of these instructions? What is the minimum length needed to cause a segmentation fault?  [4 pt]

<part2+1> mov %rsp, %rbp

<part2+18> lea -0x30(%rbp), %rax

These two instructions allocate the space in memory for the array and a buffer. Unfortunately, they only allocate the space for 40 bytes, an int array of 10 elements, plus 8 more for the buffer. Because we pass in 13 as the size of the array, we tell the array loop to continue for 52 bytes and into the return address which is why the return address is corrupted. 

3. Someone claims that creating array on the Heap would remove the possibility of segmentation faults. Do you agree? Briefly explain why or why not.  [2 pt]

Yes, because the heap is dynamically allocated, creating the array there would limit the occurence of segmentation faults because more space could be allocated should the need arise. 

